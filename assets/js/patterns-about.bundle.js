!function t(e,n,i){function o(a,s){if(!n[a]){if(!e[a]){var d="function"==typeof require&&require;if(!s&&d)return d(a,!0);if(r)return r(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[a]={exports:{}};e[a][0].call(c.exports,function(t){var n=e[a][1][t];return o(n?n:t)},c,c.exports,t,e,n,i)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(t,e,n){window.non_flexbox_grid=t("./patterns/non-flexbox-grid.js")},{"./patterns/non-flexbox-grid.js":2}],2:[function(t,e,n){(function(n){e.exports=function(e,n){var i={};t("./vendor/jquery.matchHeight.js");return i.init=function(){i.cache(),i.meetsRequirements&&i.bindEvents()},i.cache=function(){i.$c={window:n(e),gridItem:n(".grid-item")}},i.bindEvents=function(){i.$c.window.on("load",i.matchGridItems)},i.meetsRequirements=function(){return i.$c.gridItem.length},i.matchGridItems=function(){i.$c.gridItem.matchHeight({byRow:!0,property:"height",target:null,remove:!1})},n(i.init),i}(window,"undefined"!=typeof window?window.jQuery:"undefined"!=typeof n?n.jQuery:null)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./vendor/jquery.matchHeight.js":3}],3:[function(t,e,n){(function(t){!function(n){"use strict";"function"==typeof define&&define.amd?define(["jquery"],n):"undefined"!=typeof e&&e.exports?e.exports=n("undefined"!=typeof window?window.jQuery:"undefined"!=typeof t?t.jQuery:null):n(jQuery)}(function(t){var e=-1,n=-1,i=function(t){return parseFloat(t)||0},o=function(e){var n=1,o=t(e),r=null,a=[];return o.each(function(){var e=t(this),o=e.offset().top-i(e.css("margin-top")),s=a.length>0?a[a.length-1]:null;null===s?a.push(e):Math.floor(Math.abs(r-o))<=n?a[a.length-1]=s.add(e):a.push(e),r=o}),a},r=function(e){var n={byRow:!0,property:"height",target:null,remove:!1};return"object"==typeof e?t.extend(n,e):("boolean"==typeof e?n.byRow=e:"remove"===e&&(n.remove=!0),n)},a=t.fn.matchHeight=function(e){var n=r(e);if(n.remove){var i=this;return this.css(n.property,""),t.each(a._groups,function(t,e){e.elements=e.elements.not(i)}),this}return this.length<=1&&!n.target?this:(a._groups.push({elements:this,options:n}),a._apply(this,n),this)};a.version="0.7.0",a._groups=[],a._throttle=80,a._maintainScroll=!1,a._beforeUpdate=null,a._afterUpdate=null,a._rows=o,a._parse=i,a._parseOptions=r,a._apply=function(e,n){var s=r(n),d=t(e),u=[d],c=t(window).scrollTop(),l=t("html").outerHeight(!0),f=d.parents().filter(":hidden");return f.each(function(){var e=t(this);e.data("style-cache",e.attr("style"))}),f.css("display","block"),s.byRow&&!s.target&&(d.each(function(){var e=t(this),n=e.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block"),e.data("style-cache",e.attr("style")),e.css({display:n,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})}),u=o(d),d.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||"")})),t.each(u,function(e,n){var o=t(n),r=0;if(s.target)r=s.target.outerHeight(!1);else{if(s.byRow&&o.length<=1)return void o.css(s.property,"");o.each(function(){var e=t(this),n=e.attr("style"),i=e.css("display");"inline-block"!==i&&"flex"!==i&&"inline-flex"!==i&&(i="block");var o={display:i};o[s.property]="",e.css(o),e.outerHeight(!1)>r&&(r=e.outerHeight(!1)),n?e.attr("style",n):e.css("display","")})}o.each(function(){var e=t(this),n=0;s.target&&e.is(s.target)||("border-box"!==e.css("box-sizing")&&(n+=i(e.css("border-top-width"))+i(e.css("border-bottom-width")),n+=i(e.css("padding-top"))+i(e.css("padding-bottom"))),e.css(s.property,r-n+"px"))})}),f.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||null)}),a._maintainScroll&&t(window).scrollTop(c/l*t("html").outerHeight(!0)),this},a._applyDataApi=function(){var e={};t("[data-match-height], [data-mh]").each(function(){var n=t(this),i=n.attr("data-mh")||n.attr("data-match-height");i in e?e[i]=e[i].add(n):e[i]=n}),t.each(e,function(){this.matchHeight(!0)})};var s=function(e){a._beforeUpdate&&a._beforeUpdate(e,a._groups),t.each(a._groups,function(){a._apply(this.elements,this.options)}),a._afterUpdate&&a._afterUpdate(e,a._groups)};a._update=function(i,o){if(o&&"resize"===o.type){var r=t(window).width();if(r===e)return;e=r}i?-1===n&&(n=setTimeout(function(){s(o),n=-1},a._throttle)):s(o)},t(a._applyDataApi),t(window).bind("load",function(t){a._update(!1,t)}),t(window).bind("resize orientationchange",function(t){a._update(!0,t)})})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
