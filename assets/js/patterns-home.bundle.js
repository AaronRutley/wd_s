!function e(t,n,o){function i(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(r)return r(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n?n:e)},c,c.exports,e,t,n,o)}return n[a].exports}for(var r="function"==typeof require&&require,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,t,n){window.mobile_navigation=e("./patterns/mobile-navigation.js"),window.non_flexbox_grid=e("./patterns/non-flexbox-grid.js")},{"./patterns/mobile-navigation.js":2,"./patterns/non-flexbox-grid.js":3}],2:[function(e,t,n){(function(e){t.exports=function(e,t){var n={};return n.init=function(){n.cache(),n.meetsRequirements&&n.bindEvents()},n.cache=function(){n.$c={window:t(e),mobileNavMenuContainer:t(".mobile-nav-menu"),menuItemCount:t(".mobile-nav-menu .mobile-nav > li").length}},n.bindEvents=function(){n.$c.menuItemCount<=5&&exit,n.replaceLastMenuItem(),t("body").on("click",".mobile-menu-more-link",n.displayMoreItems),t("body").on("click",".mobile-nav-menu .menu-item-has-children a",n.setSecondClick),t("body").on("click",".close-mobile-menu",n.hideMoreItems)},n.meetsRequirements=function(){return n.$c.mobileNavMenuContainer.length},n.replaceLastMenuItem=function(){t(".mobile-nav-menu .mobile-nav > li:nth-child(4)").after('<li class="mobile-menu-more-link"><a href="#"><span><i class="more-icon"></i>More</span></a></li>')},n.displayMoreItems=function(e){return e.preventDefault(),t("body").hasClass("mobile-menu-more")&&!t("body").hasClass("sub-menu-more")?void n.removeMenuClasses():(n.removeMenuClasses(),n.$c.mobileNavMenuContainer.toggleClass("more"),void t("body").toggleClass("mobile-menu-more"))},n.setSecondClick=function(e){console.log("child click",this),t(this).parent("li").hasClass("visible")||e.preventDefault(),n.removeMenuClasses(),t(this).parent("li").toggleClass("visible"),n.$c.mobileNavMenuContainer.toggleClass("more"),t("body").toggleClass("mobile-menu-more sub-menu-more")},n.hideMoreItems=function(){n.removeMenuClasses()},n.removeMenuClasses=function(){t("body").removeClass("mobile-menu-more sub-menu-more"),n.$c.mobileNavMenuContainer.removeClass("more"),t(".menu-item-has-children").removeClass("visible")},t(n.init),n}(window,"undefined"!=typeof window?window.jQuery:"undefined"!=typeof e?e.jQuery:null)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(e,t,n){(function(n){t.exports=function(t,n){var o={};e("./vendor/jquery.matchHeight.js");return o.init=function(){o.cache(),o.meetsRequirements&&o.bindEvents()},o.cache=function(){o.$c={window:n(t),gridItem:n(".grid-item")}},o.bindEvents=function(){o.$c.window.on("load",o.matchGridItems)},o.meetsRequirements=function(){return o.$c.gridItem.length},o.matchGridItems=function(){o.$c.gridItem.matchHeight({byRow:!0,property:"height",target:null,remove:!1})},n(o.init),o}(window,"undefined"!=typeof window?window.jQuery:"undefined"!=typeof n?n.jQuery:null)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./vendor/jquery.matchHeight.js":4}],4:[function(e,t,n){(function(e){!function(n){"use strict";"function"==typeof define&&define.amd?define(["jquery"],n):"undefined"!=typeof t&&t.exports?t.exports=n("undefined"!=typeof window?window.jQuery:"undefined"!=typeof e?e.jQuery:null):n(jQuery)}(function(e){var t=-1,n=-1,o=function(e){return parseFloat(e)||0},i=function(t){var n=1,i=e(t),r=null,a=[];return i.each(function(){var t=e(this),i=t.offset().top-o(t.css("margin-top")),s=a.length>0?a[a.length-1]:null;null===s?a.push(t):Math.floor(Math.abs(r-i))<=n?a[a.length-1]=s.add(t):a.push(t),r=i}),a},r=function(t){var n={byRow:!0,property:"height",target:null,remove:!1};return"object"==typeof t?e.extend(n,t):("boolean"==typeof t?n.byRow=t:"remove"===t&&(n.remove=!0),n)},a=e.fn.matchHeight=function(t){var n=r(t);if(n.remove){var o=this;return this.css(n.property,""),e.each(a._groups,function(e,t){t.elements=t.elements.not(o)}),this}return this.length<=1&&!n.target?this:(a._groups.push({elements:this,options:n}),a._apply(this,n),this)};a.version="0.7.0",a._groups=[],a._throttle=80,a._maintainScroll=!1,a._beforeUpdate=null,a._afterUpdate=null,a._rows=i,a._parse=o,a._parseOptions=r,a._apply=function(t,n){var s=r(n),l=e(t),u=[l],c=e(window).scrollTop(),d=e("html").outerHeight(!0),f=l.parents().filter(":hidden");return f.each(function(){var t=e(this);t.data("style-cache",t.attr("style"))}),f.css("display","block"),s.byRow&&!s.target&&(l.each(function(){var t=e(this),n=t.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block"),t.data("style-cache",t.attr("style")),t.css({display:n,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})}),u=i(l),l.each(function(){var t=e(this);t.attr("style",t.data("style-cache")||"")})),e.each(u,function(t,n){var i=e(n),r=0;if(s.target)r=s.target.outerHeight(!1);else{if(s.byRow&&i.length<=1)return void i.css(s.property,"");i.each(function(){var t=e(this),n=t.attr("style"),o=t.css("display");"inline-block"!==o&&"flex"!==o&&"inline-flex"!==o&&(o="block");var i={display:o};i[s.property]="",t.css(i),t.outerHeight(!1)>r&&(r=t.outerHeight(!1)),n?t.attr("style",n):t.css("display","")})}i.each(function(){var t=e(this),n=0;s.target&&t.is(s.target)||("border-box"!==t.css("box-sizing")&&(n+=o(t.css("border-top-width"))+o(t.css("border-bottom-width")),n+=o(t.css("padding-top"))+o(t.css("padding-bottom"))),t.css(s.property,r-n+"px"))})}),f.each(function(){var t=e(this);t.attr("style",t.data("style-cache")||null)}),a._maintainScroll&&e(window).scrollTop(c/d*e("html").outerHeight(!0)),this},a._applyDataApi=function(){var t={};e("[data-match-height], [data-mh]").each(function(){var n=e(this),o=n.attr("data-mh")||n.attr("data-match-height");o in t?t[o]=t[o].add(n):t[o]=n}),e.each(t,function(){this.matchHeight(!0)})};var s=function(t){a._beforeUpdate&&a._beforeUpdate(t,a._groups),e.each(a._groups,function(){a._apply(this.elements,this.options)}),a._afterUpdate&&a._afterUpdate(t,a._groups)};a._update=function(o,i){if(i&&"resize"===i.type){var r=e(window).width();if(r===t)return;t=r}o?-1===n&&(n=setTimeout(function(){s(i),n=-1},a._throttle)):s(i)},e(a._applyDataApi),e(window).bind("load",function(e){a._update(!1,e)}),e(window).bind("resize orientationchange",function(e){a._update(!0,e)})})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
